package cmd

import (
	"fmt"
	"strings"

	"github.com/ArjenSchwarz/awstools/helpers"
	"github.com/spf13/cobra"
)

// vpccidrsCommand represents the cidrs command
var vpccidrsCommand = &cobra.Command{
	Use:   "cidrs",
	Short: "Get VPC cidrs",
	Long:  `Get an overview of the cidrs of all VPCs in the account.`,
	Run:   vpccidrs,
}

func init() {
	vpcCmd.AddCommand(vpccidrsCommand)
}

func vpccidrs(cmd *cobra.Command, args []string) {
	resultTitle := "VPC cidrs for account " + getName(helpers.GetAccountID())
	svc := helpers.Ec2Session()
	vpcs := helpers.GetAllVPCs()
	cidrs := helpers.GetAllVPCRouteTables(svc)
	keys := []string{"AccountID", "VPC", "VPC Name", "VPC CIDR", "Subnet", "Subnet Name", "Subnet CIDR"}
	output := format.OutputArray{Keys: keys, Title: resultTitle}
	for _, routetable := range cidrs {
		content := make(map[string]interface{})
		content["ID"] = routetable.ID
		content["Name"] = getName(routetable.ID)
		content["VPC"] = routetable.Vpc.ID
		content["VPC Name"] = getName(routetable.Vpc.ID)
		var subnets []string
		for _, subnet := range routetable.Subnets {
			subnets = append(subnets, fmt.Sprintf("%v (%v)", getName(subnet), subnet))
		}
		content["Subnets"] = strings.Join(subnets, ",")
		content["AccountID"] = routetable.Vpc.AccountID
		content["Account Name"] = getName(routetable.Vpc.AccountID)
		var routelist []string
		for _, route := range routetable.cidrs {
			routelist = append(routelist, fmt.Sprintf("%v: %v", route.DestinationCIDR, route.DestinationTarget))
		}
		content["cidrs"] = strings.Join(routelist, ",")
		holder := format.OutputHolder{Contents: content}
		output.AddHolder(holder)
	}
	// if settings.IsDrawIO() {
	// 	keys = append(keys, "Image")
	// }
	//
	// switch settings.GetOutputFormat() {
	// case "drawio":
	// 	output.DrawIOHeader = createVpcPeeringsDrawIOHeader()
	// case "dot":
	// 	dotcolumns := config.DotColumns{
	// 		From: "ID",
	// 		To:   "PeeringIDs",
	// 	}
	// 	settings.DotColumns = &dotcolumns
	// }
	// vpcs := make(map[string]helpers.VPCHolder)
	// sorted := make(map[string][]string)
	// if settings.ShouldCombineAndAppend() {
	// 	headers, previousResults := drawio.GetHeaderAndContentsFromFile(*settings.OutputFile)
	// 	for _, row := range previousResults {
	// 		id := row[headers["ID"]]
	// 		accountid := row[headers["AccountID"]]
	// 		peeringids := row[headers["PeeringIDs"]]
	// 		if peeringids != "" {
	// 			sorted[id] = strings.Split(peeringids, ",")
	// 			vpcHolder := helpers.VPCHolder{
	// 				ID:        id,
	// 				AccountID: accountid,
	// 			}
	// 			vpcs[id] = vpcHolder
	// 		} else {
	// 			sorted[id] = []string{}
	// 		}
	// 	}
	// }

	// for _, peering := range peerings {
	// 	if _, ok := sorted[peering.PeeringID]; !ok {
	// 		sorted[peering.PeeringID] = []string{}
	// 	}
	// 	if _, ok := sorted[peering.AccepterVpc.ID]; !ok {
	// 		sorted[peering.AccepterVpc.ID] = []string{peering.PeeringID}
	// 		vpcs[peering.AccepterVpc.ID] = peering.AccepterVpc
	// 	} else {
	// 		sorted[peering.AccepterVpc.ID] = append(sorted[peering.AccepterVpc.ID], peering.PeeringID)
	// 	}
	// 	if _, ok := sorted[peering.RequesterVpc.ID]; !ok {
	// 		sorted[peering.RequesterVpc.ID] = []string{peering.PeeringID}
	// 		vpcs[peering.RequesterVpc.ID] = peering.RequesterVpc
	// 	} else {
	// 		sorted[peering.RequesterVpc.ID] = append(sorted[peering.RequesterVpc.ID], peering.PeeringID)
	// 	}
	// }
	// for id, entry := range sorted {
	// 	peeringIDs := unique(entry)
	// 	content := make(map[string]interface{})
	// 	content["ID"] = id
	// 	content["Name"] = getName(id)
	// 	if len(entry) > 0 {
	// 		content["AccountID"] = vpcs[id].AccountID
	// 		content["PeeringIDs"] = strings.Join(peeringIDs, ",")
	// 		if settings.IsDrawIO() {
	// 			content["Image"] = drawio.ShapeAWSVPC
	// 		}
	// 	} else {
	// 		if settings.IsDrawIO() {
	// 			content["Image"] = drawio.ShapeAWSVPCPeering
	// 		}
	// 	}
	// }
	output.Write(*settings)
}
